#version 430

layout(binding = 0, rgba8) uniform image2D outputTexture;
layout(binding = 1, rgba8) coherent uniform image3D voxel;

layout(std430, binding = 1) buffer Camera {
	mat4 P;
	mat4 V;
	mat4 I;
};



struct Ray{
	vec3 origin;
	vec3 dir;
};

// TODO intersection
// http://wiki.cgsociety.org/index.php/Ray_Sphere_Intersection


Ray initRay(uint x_in, uint y_in){
	Ray r;

	float x = ( float(x_in) / 1536.0 )*2.0 - 1.0;
	float y = ( float(y_in) / 864.0 )*2.0 - 1.0;

	vec4 pt1 = vec4(x, y, 0.0, 1.0);
	vec4 pt2 = vec4(x, y, 1.0, 1.0);

	vec4 pos1 = I * pt1;
	vec4 pos2 = I * pt2;

	r.dir = (pos2).xyz;
	normalize(r.dir);

	r.origin = pos1.xyz;

	return r;
}

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main(){
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;

	if(x < 1536 && y < 864){
		Ray r = initRay(x, y);

		vec4 color = vec4(r.dir, 1.0);

		imageStore(outputTexture, ivec2(x, y), color);

	}
}